Always:
- keep direct dependencies up to date
  - go list -m -u all
  - go get -u ./... && go mod tidy
- follow new libvirt.org/go/libvirt major releases, see :
  - https://libvirt.org/news.html
  - https://pkg.go.dev/libvirt.org/go/libvirt

Resource leaks:
- check for remaining map race-conditions
- check that the switch to Context fixes all known resource leaks
- mulchd "outage" of 2020-07-22:
    - investigate all the preparePipes.funcX found in the stacktrace (see m2 log)
    - check for a possible deadlock / missing timeout in the message hub? (same)
    - maybe fixed by the switch to Context of run.go
- still some hanging SSH shown in status (try with a client reboot?)
    - scheduleSSHKeepAlives() does its job, the issue's upper in the stack (runChannels never ends?)
    - added goroutine pprof profile to help
- mulchd memory usage (10+GB)
  - normal for Go 1.12 → 1.15 runtimes, memory is released to the kernel if
    it needs it (MADV_FREE), but but RSS does not capture this information
  - Go 1.16 reverted to MADV_DONTNEED, so this is not a MADV_FREE false positive
  - heap profile show a very small memory consumption, comparatively
  - seems libvirt related! (Streams & Volume transfert) - anonymous allocations

Short term:
- create rh-proxy-proto.sh
- test and update install script for 22.04!
- clean multipart temp files after upload?
  - issue only exists for http2 (so not on a local dev env)
  - should be fixed with Go 1.20 : https://github.com/golang/go/issues/20253
  - can be done by hand with req.MultipartForm.RemoveAll()
- explore recent IO slowdowns for libvirt storage on some systems
  - vm disk create, seed storage, backup uploads, etc
  - starts at 30MB/s, ends at 5
  - libvirt 100% CPU
- vm info: show ports?
- mulch client port forwarding (via SSH)?
- README: add image for vm migration?
- human readable "mulch status" (keep current output with a -b?)
- explore vm migration possible edge case:
  // migration of active VM ok → local vm deletion → an existing
	// "lower" inactive VM is activated (unharmful error if source was active?)
- systemd CapabilityBoundingSet/AmbientCapabilities = CAP_NET_BIND_SERVICE (+NoNewPrivileges=true) [systemd v229+]
- make backup available at "prepare" stage during a restore?
- allow to globally disable auto-rebuild?
- add timeout on VM creation scripts OR at least allow "greenhouse" VMs deletion
  - note: for deletion, shutting down is not a good option when scripts started, I think
    - need to find cases where it fails, all tests OK for now
- rights: limit SSH to a specific VM? (check a fake vm=… header in the SSH proxy?)
- rights: logs may expose sensitive data (which ones?)
- rights: add predefined right groups for common usages?
- add "variables" to TOML files? (like $author or $USER in VM name or URL, to create "generic" TOML files)
- provide a whereis feature / add "official" scripts (like wtf_is_my_vm.sh) to the client?
- proxy-chain: provide a way to clean old childs? (ex: proxy_chain_child_url have changed)
- proxy / proxy-chain request stats?
- check domains validity on VM create, PS: domain name validation is HARD :(
- add comments to backups (and other objects?)
- test "pre-allocated" backup disks on backup duration for "big VMs"?
- add a SSH keepalive for Run.SSHConn?
- fix completion when using a non-default (-c) config file (see barry: __barry_get_config)
- on redefine, show what's instantaneous and what's needing a rebuild?
- allow a cron-style syntax for auto_rebuild
- like restore_backup, allow to restore from a VM (ex: autorebuild from prod)
- backup expiration?
- "meta" informations for restore? (ex: gitlab version)
  - must be available BEFORE the backup even exists (ex: rebuild)

Long term:
- full async API?
- write API public documentation
- continue tests on snapshots (see branch "snapshots")
- use vm_prefix for disks/seeds/… to allow multiple mulchd on the same machine (or use different storages?)
- investigate why we seem to lose contact with (some) VMs when killing/restarting libvirtd
  - (dhcp/dnsmasq? ebtables? mulch-network restart?)
- libvirtd watchdog + alert (ex: timeout in VMStateDatabase?)
- clean VM XML template (ex: no display device [serial console])
- create a nice and shiny website for Mulch project
- have a look at ansible? (for sample scripts)
- remove the need to supply the VM name for redefine command?
  - pro-keep: sanity check for a dangerous op, but looks confusing to the user
  - con-remove: change controller logic
- shortcut for "do action" (ex: mulch open xyz) with completion?
- add 'env' to mulchd.toml? (overridden by VM's env directive)
- check for missing response.Body.Close() (or things like that)
- check for io.Reader bad usages ("they must record the number of bytes read into the buffer, reslice the buffer, process that data, and only then, consult the error." https://dave.cheney.net/2019/09/05/dont-force-allocations-on-the-callers-of-your-api)

- change HTTP code from 200 to 4XX in controllers when things fails (ex: req.Stream.Failure)
  - in client, make the non-200 error message silent in stream mode?

- check connection and access rights
- differentiate "rights issues" from "libvirtd not running" issues
- check 'nwfilter-dumpxml clean-traffic' / libvirt-daemon-config-nwfilter during install?

- mulchd should be able to run with a remote libvirtd (StoragePath disallow this, currently)
- support passphrase for Mulch SSH key?
- move SSH Keys and MulchSuperUser to VM level?
- challenge based auth?
