# Sample configuration file for Mulch server (mulchd)
# Values here are defaults (except for seeds and origins)

# Listen address of Mulchd API server (no IP = all interfaces)
listen = ":8686"

# Enable HTTPS-only for *API server*, using a Let's Encrypt certificate
# with specified domain. Default ("") is HTTP-only.
# See also proxy_acme_* settings below since the certificate is generated
# by mulch-proxy (port 443)
listen_https_domain = ""

# URI libvirt will use to contact the hypervisor
libvirt_uri = "qemu:///system"

# Storage path for libvirt disk images and "seeds" (Linux distributions)
# real world example: /srv/mulch
storage_path = "./var/storage"

# Mulch server (small) databases
# real world example: /var/lib/mulch
data_path = "./var/data"

# Temporary files path, empty = system default directory
# (may be useful for big backups compression, backup uploads, etc)
temp_path = ""

# Name prefix for Mulch VMs in libirt (so we don't collide with
# some existing VMs)
vm_prefix = "mulch-"

# This user will be created inside VMs, as a sudoer, and used for
# control and command of the VM by Mulch
mulch_super_user = "admin"

# If you need to use a new SSH key for upcoming VMs, change this (generated on mulchd startup)
# Leave this alone if you don't know what you're doing ;)
mulch_super_user_ssh_key = "mulch_super_user"

# Listen address for SSH proxy
proxy_listen_ssh = ":8022"

# Extra (limited) SSH pub keys (see ./etc/extra_authorized_keys.sample)
proxy_ssh_extra_keys_file = ""

# ACME protocol directory server
#
# We use Let's Encrypt *staging* directory by default.
# See https://letsencrypt.org/docs/staging-environment/ to get the
# staging "Fake LE Root X1" root certificate during tests.
#
# For Let's Encrypt production URL, you can use this "magic constant":
# proxy_acme_url = "LETS_ENCRYPT_PRODUCTION"
# Warning: define a proper email below!
# Warning: you may have to clear ./data/certs/ directory if you change this setting
proxy_acme_url = "https://acme-staging-v02.api.letsencrypt.org/directory"

# Email will be used by CAs for notifications about issued certificates.
proxy_acme_email = "root@localhost.localdomain"

# Listen addresses (HTTP/HTTPS) for the Reverse Proxy
proxy_listen_http = ":80"
proxy_listen_https = ":443"

# Reverse Proxy Chaining (modes: "child" or "parent", empty = disabled)
proxy_chain_mode = ""

# if parent: listening address for the API
# if child: URL of the parent API to contact
# Supports HTTP or HTTPS
# Recommanded port: 8787 (ex: https://api.mydomain.tld:8787)
proxy_chain_parent_url = ""

# only for children: parent proxy will forward requests to this URL (us!)
# It must be a dedicated domain, HTTPS is available if you want to
# secure forwarded traffic (ex: https://forward.mymulchd.tld)
# warning: you may have to clear parent domain database if you change
# this value afterward
proxy_chain_child_url = ""

# Pre-Shared Key between children and the parent proxy (min length: 16)
proxy_chain_psk = ""

# HTTP X-Forwarded-For header is commonly used to get the originating IP
# address of clients, with the chain of intermediate proxies. This header
# is hard to use in a secure way, since the beginning of the chain can be
# forged. If you set this setting to true, mulch-proxy will replace the value
# of this header with the immediate remote address, a much more secure value.
# (note: in this case, X-Forwarded-For and X-Real-Ip will have the same value)
#
# This setting is proxy_chain compliant (the original IP is preserved).
proxy_force_x_forwarded_for = false

# If you use a third-party reverse proxy in front of mulch-proxy,
# you can specify its IP address(es) here, so that headers are trusted
# and forwarded (proxy_chain must be disabled).
proxy_trusted_proxies = []

# Rate Control for the Reverse Proxy
#
# Limit 1 (concurrent requests):
# - proxy_rate_concurrent_max_requests
#     Maximum number of concurrent "running" requests
# - proxy_rate_concurrent_overflow_timeout_seconds
#     When the limit is reached, wait this number of seconds for a free slot
#     before rejecting (0 = immediate)
#
# Limit 2 (rate limiting):
# - proxy_rate_limit_burst_requests
#     Number of requests that be accepted without delay…
# - proxy_rate_limit_requests_per_second
#     … after that, requests will be delayed to match this rate…
#     (it also acts as a "cooldown" for the burst, must be > 1)
# - proxy_rate_limit_max_delay_seconds
#     … with a maximum delay of this number of seconds
#
# - Both of these limits are independent and can be enabled separately
# - Disable a limit by setting all values to 0
# - Rate control is applied per IP address
# - Rejected requests will return a 429 status code
# - proxy_rate_vip_list are not affected by rate control (list of IPs strings)
proxy_rate_concurrent_max_requests = 0
proxy_rate_concurrent_overflow_timeout_seconds = 0

proxy_rate_limit_burst_requests = 0
proxy_rate_limit_requests_per_second = 0
proxy_rate_limit_max_delay_seconds = 0

proxy_rate_vip_list = []

# Auto-rebuild will check everyday, at specified time, if any VM need
# an automatic rebuild (according its settings). Format: HH:MM
auto_rebuild_time = "23:30"

# Sample seeds
[[seed]]
name = "debian_13"
url = "https://cloud.debian.org/images/cloud/trixie/latest/debian-13-genericcloud-amd64.qcow2"

[[seed]]
name = "centos_7"
url = "https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"

[[seed]]
name = "rocky_8"
url = "https://dl.rockylinux.org/pub/rocky/8/images/x86_64/Rocky-8-GenericCloud.latest.x86_64.qcow2"

[[seed]]
name = "ubuntu_2004"
url = "https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64-disk-kvm.img"

[[seed]]
name = "ubuntu_2204"
url = "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-disk-kvm.img"

[[seed]]
name = "ubuntu_2404"
url = "https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img"

#[[seed]]
#name = "ubuntu_2404_lamp"
#seeder = "https://raw.githubusercontent.com/OnitiFR/mulch/master/vm-samples/seeders/ubuntu_2404_lamp.toml"
# Seeders can also use origins: {core}/../vm-samples/seeders/ubuntu_2404_lamp.toml

# Peers, allowing inter-mulchd VM migrations and secret sharing
# (it's suggested to create a dedicated API key on the remote server)
#[[peer]]
#name = "server2"
#url = "https://server2.mydomain.tld:8686"
#key = "K8OpSluPnUzcL2XipfPwt14WBT79aegqe4lZikObMIsiErqgxxco0iptr5MliQCY"
#sync_secrets = true # server2 must do the same with us

# This origin can be used for any script in VM TOMLs: "admin@{core}/prepare/deb-comfort.sh"
[[origin]]
name = "core"
type = "http"
path = "https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/"

# [[origin]]
# name = "foo"
# type = "git"
# path = "git@github.com:OnitiFR/mulch.git"
# dir = "scripts"
# branch = "master"
# ssh_key_file = ".ssh/id_rsa" # or: ssh_agent = true
# ssh_agent = false

# [[origin]]
# name = "bar"
# type = "file"
# path = "/home/mulch/mulch-scripts"
