# This is a sample VM definition showing all possible settings. It will
# create a LAMP machine hosting a Wordpress instance.

# Usage:
#  mulch vm create sample-vm-full.toml

name = "testvm"
hostname = "testvm.localdomain" # default: localhost or first provided domain if provided
timezone = "Europe/Paris" # default
app_user = "app" # default

seed = "debian_10"

# Will speed up creation for this test (no update/upgrade)
# (but install will not be up to date, don't do this in production!)
init_upgrade = false

disk_size = "20G"
ram_size = "2G"
cpu_count = 1

# Define system-wide environment variables
env = [
    ["TEST1", "foo"],
    ["TEST2", "bar"],

    # this one actually works with default apache prepare scripts
    ["MULCH_HTTP_BASIC_AUTH", "mulch:secret"],
]

backup_disk_size = "2G"

# backup speed vs back size (it depends a lot on backup content)
backup_compress = true

# DNS domains
# 'test1.localhost->1234' means that 'test1.localhost' HTTP requests
# are going to be proxied to VM's 1234 port. Default is 80.
domains = ['test1.localhost->1234', 'dev.localhost->8080']
redirect_to_https = false # (false = proxy also from tcp/80)
redirects = [
    ["www.test1.localhost", "test1.localhost"],
    ["old.test1.localhost", "test1.localhost", "301"], # default HTTP redirect is 302
]

# Auto-rebuild this VM every week, possible values: daily/weekly/monthly
# See also auto_rebuild_time global setting.
# Default is "" (auto-rebuild disabled)
# You must have backup and restore scripts to enable auto-rebuild.
auto_rebuild = "weekly"

# If all prepare scripts share the same base URL, you can use prepare_prefix_url.
# Otherwise, use absolute URL in 'prepare': admin@https://server/script.sh
# Note: you can use file:// scheme for files on mulchd FS (ex: local git repo)
prepare_prefix_url = "https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/prepare/"
prepare = [
    # user@script
    "admin@deb-comfort.sh",
    "admin@test-warn.sh",
    "admin@deb-lamp.sh",
]

# Install (done after prepare, and not replayed on VM rebuild)
install_prefix_url = "https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/install/"
install = [
    "app@deb-wordpress.sh",
]

# Backup
backup_prefix_url = "https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/backup/"
backup = [
    "app@lamp.sh",
]

# Restore
restore_prefix_url = "https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/restore/"
restore = [
    "app@wordpress.sh",
]

# Scripts for usual tasks on the VM
# example : mulch do myvm open
#[[do-actions]]
#name = "open"
#script = "https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/actions/open.sh"
#user = "app"
#description = "Open VM first domain in the browser"

# Do actions can also be added via 'prepare' scripts
# Print the following lines:
# _MULCH_ACTION_NAME=open
# _MULCH_ACTION_SCRIPT=https://raw.githubusercontent.com/OnitiFR/mulch/master/scripts/actions/open.sh
# _MULCH_ACTION_USER=app
# _MULCH_ACTION_DESCRIPTION=Open VM first domain in the browser
# _MULCH_ACTION=commit
# Multiple actions per script are allowed, just repeat the previous "block".

# Do actions may execute special commands on the client, ex:
# echo "_MULCH_OPEN_URL=https://$_DOMAIN_FIRST/test"
